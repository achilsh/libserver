// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machine_study.proto

#ifndef PROTOBUF_machine_5fstudy_2eproto__INCLUDED
#define PROTOBUF_machine_5fstudy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mstudy {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_machine_5fstudy_2eproto();
void protobuf_AssignDesc_machine_5fstudy_2eproto();
void protobuf_ShutdownFile_machine_5fstudy_2eproto();

class ImageData;
class ImageProcessResult;
class FeatureData;
class ImageSearch;
class SearchResult;
class Heart;

// ===================================================================

class ImageData : public ::google::protobuf::Message {
 public:
  ImageData();
  virtual ~ImageData();

  ImageData(const ImageData& from);

  inline ImageData& operator=(const ImageData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageData& default_instance();

  void Swap(ImageData* other);

  // implements Message ----------------------------------------------

  ImageData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageData& from);
  void MergeFrom(const ImageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 st_id = 1;
  inline bool has_st_id() const;
  inline void clear_st_id();
  static const int kStIdFieldNumber = 1;
  inline ::google::protobuf::int64 st_id() const;
  inline void set_st_id(::google::protobuf::int64 value);

  // optional bytes bytes = 2;
  inline bool has_bytes() const;
  inline void clear_bytes();
  static const int kBytesFieldNumber = 2;
  inline const ::std::string& bytes() const;
  inline void set_bytes(const ::std::string& value);
  inline void set_bytes(const char* value);
  inline void set_bytes(const void* value, size_t size);
  inline ::std::string* mutable_bytes();
  inline ::std::string* release_bytes();
  inline void set_allocated_bytes(::std::string* bytes);

  // optional int32 resize_width = 3;
  inline bool has_resize_width() const;
  inline void clear_resize_width();
  static const int kResizeWidthFieldNumber = 3;
  inline ::google::protobuf::int32 resize_width() const;
  inline void set_resize_width(::google::protobuf::int32 value);

  // optional int32 resize_height = 4;
  inline bool has_resize_height() const;
  inline void clear_resize_height();
  static const int kResizeHeightFieldNumber = 4;
  inline ::google::protobuf::int32 resize_height() const;
  inline void set_resize_height(::google::protobuf::int32 value);

  // optional string image_format = 5;
  inline bool has_image_format() const;
  inline void clear_image_format();
  static const int kImageFormatFieldNumber = 5;
  inline const ::std::string& image_format() const;
  inline void set_image_format(const ::std::string& value);
  inline void set_image_format(const char* value);
  inline void set_image_format(const char* value, size_t size);
  inline ::std::string* mutable_image_format();
  inline ::std::string* release_image_format();
  inline void set_allocated_image_format(::std::string* image_format);

  // optional bool is_return_feature = 6;
  inline bool has_is_return_feature() const;
  inline void clear_is_return_feature();
  static const int kIsReturnFeatureFieldNumber = 6;
  inline bool is_return_feature() const;
  inline void set_is_return_feature(bool value);

  // optional bool is_return_feature_zip = 7;
  inline bool has_is_return_feature_zip() const;
  inline void clear_is_return_feature_zip();
  static const int kIsReturnFeatureZipFieldNumber = 7;
  inline bool is_return_feature_zip() const;
  inline void set_is_return_feature_zip(bool value);

  // optional bool is_server_save_feature = 8;
  inline bool has_is_server_save_feature() const;
  inline void clear_is_server_save_feature();
  static const int kIsServerSaveFeatureFieldNumber = 8;
  inline bool is_server_save_feature() const;
  inline void set_is_server_save_feature(bool value);

  // optional bool is_create_model_data = 9;
  inline bool has_is_create_model_data() const;
  inline void clear_is_create_model_data();
  static const int kIsCreateModelDataFieldNumber = 9;
  inline bool is_create_model_data() const;
  inline void set_is_create_model_data(bool value);

  // optional bool is_get_colors = 10;
  inline bool has_is_get_colors() const;
  inline void clear_is_get_colors();
  static const int kIsGetColorsFieldNumber = 10;
  inline bool is_get_colors() const;
  inline void set_is_get_colors(bool value);

  // @@protoc_insertion_point(class_scope:mstudy.ImageData)
 private:
  inline void set_has_st_id();
  inline void clear_has_st_id();
  inline void set_has_bytes();
  inline void clear_has_bytes();
  inline void set_has_resize_width();
  inline void clear_has_resize_width();
  inline void set_has_resize_height();
  inline void clear_has_resize_height();
  inline void set_has_image_format();
  inline void clear_has_image_format();
  inline void set_has_is_return_feature();
  inline void clear_has_is_return_feature();
  inline void set_has_is_return_feature_zip();
  inline void clear_has_is_return_feature_zip();
  inline void set_has_is_server_save_feature();
  inline void clear_has_is_server_save_feature();
  inline void set_has_is_create_model_data();
  inline void clear_has_is_create_model_data();
  inline void set_has_is_get_colors();
  inline void clear_has_is_get_colors();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 st_id_;
  ::std::string* bytes_;
  ::google::protobuf::int32 resize_width_;
  ::google::protobuf::int32 resize_height_;
  ::std::string* image_format_;
  bool is_return_feature_;
  bool is_return_feature_zip_;
  bool is_server_save_feature_;
  bool is_create_model_data_;
  bool is_get_colors_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_machine_5fstudy_2eproto();
  friend void protobuf_AssignDesc_machine_5fstudy_2eproto();
  friend void protobuf_ShutdownFile_machine_5fstudy_2eproto();

  void InitAsDefaultInstance();
  static ImageData* default_instance_;
};
// -------------------------------------------------------------------

class ImageProcessResult : public ::google::protobuf::Message {
 public:
  ImageProcessResult();
  virtual ~ImageProcessResult();

  ImageProcessResult(const ImageProcessResult& from);

  inline ImageProcessResult& operator=(const ImageProcessResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageProcessResult& default_instance();

  void Swap(ImageProcessResult* other);

  // implements Message ----------------------------------------------

  ImageProcessResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageProcessResult& from);
  void MergeFrom(const ImageProcessResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 st_id = 2;
  inline bool has_st_id() const;
  inline void clear_st_id();
  static const int kStIdFieldNumber = 2;
  inline ::google::protobuf::int64 st_id() const;
  inline void set_st_id(::google::protobuf::int64 value);

  // required int32 extracted = 3;
  inline bool has_extracted() const;
  inline void clear_extracted();
  static const int kExtractedFieldNumber = 3;
  inline ::google::protobuf::int32 extracted() const;
  inline void set_extracted(::google::protobuf::int32 value);

  // optional int32 tonality1 = 4;
  inline bool has_tonality1() const;
  inline void clear_tonality1();
  static const int kTonality1FieldNumber = 4;
  inline ::google::protobuf::int32 tonality1() const;
  inline void set_tonality1(::google::protobuf::int32 value);

  // optional int32 tonality2 = 5;
  inline bool has_tonality2() const;
  inline void clear_tonality2();
  static const int kTonality2FieldNumber = 5;
  inline ::google::protobuf::int32 tonality2() const;
  inline void set_tonality2(::google::protobuf::int32 value);

  // optional int32 tonality3 = 6;
  inline bool has_tonality3() const;
  inline void clear_tonality3();
  static const int kTonality3FieldNumber = 6;
  inline ::google::protobuf::int32 tonality3() const;
  inline void set_tonality3(::google::protobuf::int32 value);

  // repeated float feature_data = 7;
  inline int feature_data_size() const;
  inline void clear_feature_data();
  static const int kFeatureDataFieldNumber = 7;
  inline float feature_data(int index) const;
  inline void set_feature_data(int index, float value);
  inline void add_feature_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      feature_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_feature_data();

  // @@protoc_insertion_point(class_scope:mstudy.ImageProcessResult)
 private:
  inline void set_has_st_id();
  inline void clear_has_st_id();
  inline void set_has_extracted();
  inline void clear_has_extracted();
  inline void set_has_tonality1();
  inline void clear_has_tonality1();
  inline void set_has_tonality2();
  inline void clear_has_tonality2();
  inline void set_has_tonality3();
  inline void clear_has_tonality3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 st_id_;
  ::google::protobuf::int32 extracted_;
  ::google::protobuf::int32 tonality1_;
  ::google::protobuf::int32 tonality2_;
  ::google::protobuf::int32 tonality3_;
  ::google::protobuf::RepeatedField< float > feature_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_machine_5fstudy_2eproto();
  friend void protobuf_AssignDesc_machine_5fstudy_2eproto();
  friend void protobuf_ShutdownFile_machine_5fstudy_2eproto();

  void InitAsDefaultInstance();
  static ImageProcessResult* default_instance_;
};
// -------------------------------------------------------------------

class FeatureData : public ::google::protobuf::Message {
 public:
  FeatureData();
  virtual ~FeatureData();

  FeatureData(const FeatureData& from);

  inline FeatureData& operator=(const FeatureData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureData& default_instance();

  void Swap(FeatureData* other);

  // implements Message ----------------------------------------------

  FeatureData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureData& from);
  void MergeFrom(const FeatureData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required int64 st_id = 2;
  inline bool has_st_id() const;
  inline void clear_st_id();
  static const int kStIdFieldNumber = 2;
  inline ::google::protobuf::int64 st_id() const;
  inline void set_st_id(::google::protobuf::int64 value);

  // required int64 picture_bin_id = 3;
  inline bool has_picture_bin_id() const;
  inline void clear_picture_bin_id();
  static const int kPictureBinIdFieldNumber = 3;
  inline ::google::protobuf::int64 picture_bin_id() const;
  inline void set_picture_bin_id(::google::protobuf::int64 value);

  // repeated float dbcode = 4;
  inline int dbcode_size() const;
  inline void clear_dbcode();
  static const int kDbcodeFieldNumber = 4;
  inline float dbcode(int index) const;
  inline void set_dbcode(int index, float value);
  inline void add_dbcode(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      dbcode() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_dbcode();

  // optional int32 tonality1 = 5;
  inline bool has_tonality1() const;
  inline void clear_tonality1();
  static const int kTonality1FieldNumber = 5;
  inline ::google::protobuf::int32 tonality1() const;
  inline void set_tonality1(::google::protobuf::int32 value);

  // optional int32 tonality2 = 6;
  inline bool has_tonality2() const;
  inline void clear_tonality2();
  static const int kTonality2FieldNumber = 6;
  inline ::google::protobuf::int32 tonality2() const;
  inline void set_tonality2(::google::protobuf::int32 value);

  // optional int32 tonality3 = 7;
  inline bool has_tonality3() const;
  inline void clear_tonality3();
  static const int kTonality3FieldNumber = 7;
  inline ::google::protobuf::int32 tonality3() const;
  inline void set_tonality3(::google::protobuf::int32 value);

  // repeated float feature_data = 8;
  inline int feature_data_size() const;
  inline void clear_feature_data();
  static const int kFeatureDataFieldNumber = 8;
  inline float feature_data(int index) const;
  inline void set_feature_data(int index, float value);
  inline void add_feature_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      feature_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_feature_data();

  // @@protoc_insertion_point(class_scope:mstudy.FeatureData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_st_id();
  inline void clear_has_st_id();
  inline void set_has_picture_bin_id();
  inline void clear_has_picture_bin_id();
  inline void set_has_tonality1();
  inline void clear_has_tonality1();
  inline void set_has_tonality2();
  inline void clear_has_tonality2();
  inline void set_has_tonality3();
  inline void clear_has_tonality3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 st_id_;
  ::google::protobuf::int64 picture_bin_id_;
  ::google::protobuf::RepeatedField< float > dbcode_;
  ::google::protobuf::int32 tonality1_;
  ::google::protobuf::int32 tonality2_;
  ::google::protobuf::RepeatedField< float > feature_data_;
  ::google::protobuf::int32 tonality3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_machine_5fstudy_2eproto();
  friend void protobuf_AssignDesc_machine_5fstudy_2eproto();
  friend void protobuf_ShutdownFile_machine_5fstudy_2eproto();

  void InitAsDefaultInstance();
  static FeatureData* default_instance_;
};
// -------------------------------------------------------------------

class ImageSearch : public ::google::protobuf::Message {
 public:
  ImageSearch();
  virtual ~ImageSearch();

  ImageSearch(const ImageSearch& from);

  inline ImageSearch& operator=(const ImageSearch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageSearch& default_instance();

  void Swap(ImageSearch* other);

  // implements Message ----------------------------------------------

  ImageSearch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageSearch& from);
  void MergeFrom(const ImageSearch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float features = 1;
  inline int features_size() const;
  inline void clear_features();
  static const int kFeaturesFieldNumber = 1;
  inline float features(int index) const;
  inline void set_features(int index, float value);
  inline void add_features(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      features() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_features();

  // @@protoc_insertion_point(class_scope:mstudy.ImageSearch)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > features_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_machine_5fstudy_2eproto();
  friend void protobuf_AssignDesc_machine_5fstudy_2eproto();
  friend void protobuf_ShutdownFile_machine_5fstudy_2eproto();

  void InitAsDefaultInstance();
  static ImageSearch* default_instance_;
};
// -------------------------------------------------------------------

class SearchResult : public ::google::protobuf::Message {
 public:
  SearchResult();
  virtual ~SearchResult();

  SearchResult(const SearchResult& from);

  inline SearchResult& operator=(const SearchResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResult& default_instance();

  void Swap(SearchResult* other);

  // implements Message ----------------------------------------------

  SearchResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchResult& from);
  void MergeFrom(const SearchResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 st_ids = 1;
  inline bool has_st_ids() const;
  inline void clear_st_ids();
  static const int kStIdsFieldNumber = 1;
  inline ::google::protobuf::int64 st_ids() const;
  inline void set_st_ids(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mstudy.SearchResult)
 private:
  inline void set_has_st_ids();
  inline void clear_has_st_ids();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 st_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_machine_5fstudy_2eproto();
  friend void protobuf_AssignDesc_machine_5fstudy_2eproto();
  friend void protobuf_ShutdownFile_machine_5fstudy_2eproto();

  void InitAsDefaultInstance();
  static SearchResult* default_instance_;
};
// -------------------------------------------------------------------

class Heart : public ::google::protobuf::Message {
 public:
  Heart();
  virtual ~Heart();

  Heart(const Heart& from);

  inline Heart& operator=(const Heart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Heart& default_instance();

  void Swap(Heart* other);

  // implements Message ----------------------------------------------

  Heart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Heart& from);
  void MergeFrom(const Heart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 heart = 1;
  inline bool has_heart() const;
  inline void clear_heart();
  static const int kHeartFieldNumber = 1;
  inline ::google::protobuf::int32 heart() const;
  inline void set_heart(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mstudy.Heart)
 private:
  inline void set_has_heart();
  inline void clear_has_heart();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 heart_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_machine_5fstudy_2eproto();
  friend void protobuf_AssignDesc_machine_5fstudy_2eproto();
  friend void protobuf_ShutdownFile_machine_5fstudy_2eproto();

  void InitAsDefaultInstance();
  static Heart* default_instance_;
};
// ===================================================================


// ===================================================================

// ImageData

// required int64 st_id = 1;
inline bool ImageData::has_st_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageData::set_has_st_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageData::clear_has_st_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageData::clear_st_id() {
  st_id_ = GOOGLE_LONGLONG(0);
  clear_has_st_id();
}
inline ::google::protobuf::int64 ImageData::st_id() const {
  return st_id_;
}
inline void ImageData::set_st_id(::google::protobuf::int64 value) {
  set_has_st_id();
  st_id_ = value;
}

// optional bytes bytes = 2;
inline bool ImageData::has_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageData::set_has_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageData::clear_has_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageData::clear_bytes() {
  if (bytes_ != &::google::protobuf::internal::kEmptyString) {
    bytes_->clear();
  }
  clear_has_bytes();
}
inline const ::std::string& ImageData::bytes() const {
  return *bytes_;
}
inline void ImageData::set_bytes(const ::std::string& value) {
  set_has_bytes();
  if (bytes_ == &::google::protobuf::internal::kEmptyString) {
    bytes_ = new ::std::string;
  }
  bytes_->assign(value);
}
inline void ImageData::set_bytes(const char* value) {
  set_has_bytes();
  if (bytes_ == &::google::protobuf::internal::kEmptyString) {
    bytes_ = new ::std::string;
  }
  bytes_->assign(value);
}
inline void ImageData::set_bytes(const void* value, size_t size) {
  set_has_bytes();
  if (bytes_ == &::google::protobuf::internal::kEmptyString) {
    bytes_ = new ::std::string;
  }
  bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageData::mutable_bytes() {
  set_has_bytes();
  if (bytes_ == &::google::protobuf::internal::kEmptyString) {
    bytes_ = new ::std::string;
  }
  return bytes_;
}
inline ::std::string* ImageData::release_bytes() {
  clear_has_bytes();
  if (bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bytes_;
    bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImageData::set_allocated_bytes(::std::string* bytes) {
  if (bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_;
  }
  if (bytes) {
    set_has_bytes();
    bytes_ = bytes;
  } else {
    clear_has_bytes();
    bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 resize_width = 3;
inline bool ImageData::has_resize_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageData::set_has_resize_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageData::clear_has_resize_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageData::clear_resize_width() {
  resize_width_ = 0;
  clear_has_resize_width();
}
inline ::google::protobuf::int32 ImageData::resize_width() const {
  return resize_width_;
}
inline void ImageData::set_resize_width(::google::protobuf::int32 value) {
  set_has_resize_width();
  resize_width_ = value;
}

// optional int32 resize_height = 4;
inline bool ImageData::has_resize_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageData::set_has_resize_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageData::clear_has_resize_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageData::clear_resize_height() {
  resize_height_ = 0;
  clear_has_resize_height();
}
inline ::google::protobuf::int32 ImageData::resize_height() const {
  return resize_height_;
}
inline void ImageData::set_resize_height(::google::protobuf::int32 value) {
  set_has_resize_height();
  resize_height_ = value;
}

// optional string image_format = 5;
inline bool ImageData::has_image_format() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageData::set_has_image_format() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageData::clear_has_image_format() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageData::clear_image_format() {
  if (image_format_ != &::google::protobuf::internal::kEmptyString) {
    image_format_->clear();
  }
  clear_has_image_format();
}
inline const ::std::string& ImageData::image_format() const {
  return *image_format_;
}
inline void ImageData::set_image_format(const ::std::string& value) {
  set_has_image_format();
  if (image_format_ == &::google::protobuf::internal::kEmptyString) {
    image_format_ = new ::std::string;
  }
  image_format_->assign(value);
}
inline void ImageData::set_image_format(const char* value) {
  set_has_image_format();
  if (image_format_ == &::google::protobuf::internal::kEmptyString) {
    image_format_ = new ::std::string;
  }
  image_format_->assign(value);
}
inline void ImageData::set_image_format(const char* value, size_t size) {
  set_has_image_format();
  if (image_format_ == &::google::protobuf::internal::kEmptyString) {
    image_format_ = new ::std::string;
  }
  image_format_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageData::mutable_image_format() {
  set_has_image_format();
  if (image_format_ == &::google::protobuf::internal::kEmptyString) {
    image_format_ = new ::std::string;
  }
  return image_format_;
}
inline ::std::string* ImageData::release_image_format() {
  clear_has_image_format();
  if (image_format_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = image_format_;
    image_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ImageData::set_allocated_image_format(::std::string* image_format) {
  if (image_format_ != &::google::protobuf::internal::kEmptyString) {
    delete image_format_;
  }
  if (image_format) {
    set_has_image_format();
    image_format_ = image_format;
  } else {
    clear_has_image_format();
    image_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_return_feature = 6;
inline bool ImageData::has_is_return_feature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageData::set_has_is_return_feature() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageData::clear_has_is_return_feature() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageData::clear_is_return_feature() {
  is_return_feature_ = false;
  clear_has_is_return_feature();
}
inline bool ImageData::is_return_feature() const {
  return is_return_feature_;
}
inline void ImageData::set_is_return_feature(bool value) {
  set_has_is_return_feature();
  is_return_feature_ = value;
}

// optional bool is_return_feature_zip = 7;
inline bool ImageData::has_is_return_feature_zip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageData::set_has_is_return_feature_zip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageData::clear_has_is_return_feature_zip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageData::clear_is_return_feature_zip() {
  is_return_feature_zip_ = false;
  clear_has_is_return_feature_zip();
}
inline bool ImageData::is_return_feature_zip() const {
  return is_return_feature_zip_;
}
inline void ImageData::set_is_return_feature_zip(bool value) {
  set_has_is_return_feature_zip();
  is_return_feature_zip_ = value;
}

// optional bool is_server_save_feature = 8;
inline bool ImageData::has_is_server_save_feature() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageData::set_has_is_server_save_feature() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageData::clear_has_is_server_save_feature() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageData::clear_is_server_save_feature() {
  is_server_save_feature_ = false;
  clear_has_is_server_save_feature();
}
inline bool ImageData::is_server_save_feature() const {
  return is_server_save_feature_;
}
inline void ImageData::set_is_server_save_feature(bool value) {
  set_has_is_server_save_feature();
  is_server_save_feature_ = value;
}

// optional bool is_create_model_data = 9;
inline bool ImageData::has_is_create_model_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImageData::set_has_is_create_model_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImageData::clear_has_is_create_model_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImageData::clear_is_create_model_data() {
  is_create_model_data_ = false;
  clear_has_is_create_model_data();
}
inline bool ImageData::is_create_model_data() const {
  return is_create_model_data_;
}
inline void ImageData::set_is_create_model_data(bool value) {
  set_has_is_create_model_data();
  is_create_model_data_ = value;
}

// optional bool is_get_colors = 10;
inline bool ImageData::has_is_get_colors() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImageData::set_has_is_get_colors() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImageData::clear_has_is_get_colors() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImageData::clear_is_get_colors() {
  is_get_colors_ = false;
  clear_has_is_get_colors();
}
inline bool ImageData::is_get_colors() const {
  return is_get_colors_;
}
inline void ImageData::set_is_get_colors(bool value) {
  set_has_is_get_colors();
  is_get_colors_ = value;
}

// -------------------------------------------------------------------

// ImageProcessResult

// required int64 st_id = 2;
inline bool ImageProcessResult::has_st_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageProcessResult::set_has_st_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageProcessResult::clear_has_st_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageProcessResult::clear_st_id() {
  st_id_ = GOOGLE_LONGLONG(0);
  clear_has_st_id();
}
inline ::google::protobuf::int64 ImageProcessResult::st_id() const {
  return st_id_;
}
inline void ImageProcessResult::set_st_id(::google::protobuf::int64 value) {
  set_has_st_id();
  st_id_ = value;
}

// required int32 extracted = 3;
inline bool ImageProcessResult::has_extracted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageProcessResult::set_has_extracted() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageProcessResult::clear_has_extracted() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageProcessResult::clear_extracted() {
  extracted_ = 0;
  clear_has_extracted();
}
inline ::google::protobuf::int32 ImageProcessResult::extracted() const {
  return extracted_;
}
inline void ImageProcessResult::set_extracted(::google::protobuf::int32 value) {
  set_has_extracted();
  extracted_ = value;
}

// optional int32 tonality1 = 4;
inline bool ImageProcessResult::has_tonality1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageProcessResult::set_has_tonality1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageProcessResult::clear_has_tonality1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageProcessResult::clear_tonality1() {
  tonality1_ = 0;
  clear_has_tonality1();
}
inline ::google::protobuf::int32 ImageProcessResult::tonality1() const {
  return tonality1_;
}
inline void ImageProcessResult::set_tonality1(::google::protobuf::int32 value) {
  set_has_tonality1();
  tonality1_ = value;
}

// optional int32 tonality2 = 5;
inline bool ImageProcessResult::has_tonality2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageProcessResult::set_has_tonality2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageProcessResult::clear_has_tonality2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageProcessResult::clear_tonality2() {
  tonality2_ = 0;
  clear_has_tonality2();
}
inline ::google::protobuf::int32 ImageProcessResult::tonality2() const {
  return tonality2_;
}
inline void ImageProcessResult::set_tonality2(::google::protobuf::int32 value) {
  set_has_tonality2();
  tonality2_ = value;
}

// optional int32 tonality3 = 6;
inline bool ImageProcessResult::has_tonality3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageProcessResult::set_has_tonality3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageProcessResult::clear_has_tonality3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageProcessResult::clear_tonality3() {
  tonality3_ = 0;
  clear_has_tonality3();
}
inline ::google::protobuf::int32 ImageProcessResult::tonality3() const {
  return tonality3_;
}
inline void ImageProcessResult::set_tonality3(::google::protobuf::int32 value) {
  set_has_tonality3();
  tonality3_ = value;
}

// repeated float feature_data = 7;
inline int ImageProcessResult::feature_data_size() const {
  return feature_data_.size();
}
inline void ImageProcessResult::clear_feature_data() {
  feature_data_.Clear();
}
inline float ImageProcessResult::feature_data(int index) const {
  return feature_data_.Get(index);
}
inline void ImageProcessResult::set_feature_data(int index, float value) {
  feature_data_.Set(index, value);
}
inline void ImageProcessResult::add_feature_data(float value) {
  feature_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ImageProcessResult::feature_data() const {
  return feature_data_;
}
inline ::google::protobuf::RepeatedField< float >*
ImageProcessResult::mutable_feature_data() {
  return &feature_data_;
}

// -------------------------------------------------------------------

// FeatureData

// required int64 id = 1;
inline bool FeatureData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureData::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 FeatureData::id() const {
  return id_;
}
inline void FeatureData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// required int64 st_id = 2;
inline bool FeatureData::has_st_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeatureData::set_has_st_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeatureData::clear_has_st_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeatureData::clear_st_id() {
  st_id_ = GOOGLE_LONGLONG(0);
  clear_has_st_id();
}
inline ::google::protobuf::int64 FeatureData::st_id() const {
  return st_id_;
}
inline void FeatureData::set_st_id(::google::protobuf::int64 value) {
  set_has_st_id();
  st_id_ = value;
}

// required int64 picture_bin_id = 3;
inline bool FeatureData::has_picture_bin_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeatureData::set_has_picture_bin_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeatureData::clear_has_picture_bin_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeatureData::clear_picture_bin_id() {
  picture_bin_id_ = GOOGLE_LONGLONG(0);
  clear_has_picture_bin_id();
}
inline ::google::protobuf::int64 FeatureData::picture_bin_id() const {
  return picture_bin_id_;
}
inline void FeatureData::set_picture_bin_id(::google::protobuf::int64 value) {
  set_has_picture_bin_id();
  picture_bin_id_ = value;
}

// repeated float dbcode = 4;
inline int FeatureData::dbcode_size() const {
  return dbcode_.size();
}
inline void FeatureData::clear_dbcode() {
  dbcode_.Clear();
}
inline float FeatureData::dbcode(int index) const {
  return dbcode_.Get(index);
}
inline void FeatureData::set_dbcode(int index, float value) {
  dbcode_.Set(index, value);
}
inline void FeatureData::add_dbcode(float value) {
  dbcode_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
FeatureData::dbcode() const {
  return dbcode_;
}
inline ::google::protobuf::RepeatedField< float >*
FeatureData::mutable_dbcode() {
  return &dbcode_;
}

// optional int32 tonality1 = 5;
inline bool FeatureData::has_tonality1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FeatureData::set_has_tonality1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FeatureData::clear_has_tonality1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FeatureData::clear_tonality1() {
  tonality1_ = 0;
  clear_has_tonality1();
}
inline ::google::protobuf::int32 FeatureData::tonality1() const {
  return tonality1_;
}
inline void FeatureData::set_tonality1(::google::protobuf::int32 value) {
  set_has_tonality1();
  tonality1_ = value;
}

// optional int32 tonality2 = 6;
inline bool FeatureData::has_tonality2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FeatureData::set_has_tonality2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FeatureData::clear_has_tonality2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FeatureData::clear_tonality2() {
  tonality2_ = 0;
  clear_has_tonality2();
}
inline ::google::protobuf::int32 FeatureData::tonality2() const {
  return tonality2_;
}
inline void FeatureData::set_tonality2(::google::protobuf::int32 value) {
  set_has_tonality2();
  tonality2_ = value;
}

// optional int32 tonality3 = 7;
inline bool FeatureData::has_tonality3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FeatureData::set_has_tonality3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FeatureData::clear_has_tonality3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FeatureData::clear_tonality3() {
  tonality3_ = 0;
  clear_has_tonality3();
}
inline ::google::protobuf::int32 FeatureData::tonality3() const {
  return tonality3_;
}
inline void FeatureData::set_tonality3(::google::protobuf::int32 value) {
  set_has_tonality3();
  tonality3_ = value;
}

// repeated float feature_data = 8;
inline int FeatureData::feature_data_size() const {
  return feature_data_.size();
}
inline void FeatureData::clear_feature_data() {
  feature_data_.Clear();
}
inline float FeatureData::feature_data(int index) const {
  return feature_data_.Get(index);
}
inline void FeatureData::set_feature_data(int index, float value) {
  feature_data_.Set(index, value);
}
inline void FeatureData::add_feature_data(float value) {
  feature_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
FeatureData::feature_data() const {
  return feature_data_;
}
inline ::google::protobuf::RepeatedField< float >*
FeatureData::mutable_feature_data() {
  return &feature_data_;
}

// -------------------------------------------------------------------

// ImageSearch

// repeated float features = 1;
inline int ImageSearch::features_size() const {
  return features_.size();
}
inline void ImageSearch::clear_features() {
  features_.Clear();
}
inline float ImageSearch::features(int index) const {
  return features_.Get(index);
}
inline void ImageSearch::set_features(int index, float value) {
  features_.Set(index, value);
}
inline void ImageSearch::add_features(float value) {
  features_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ImageSearch::features() const {
  return features_;
}
inline ::google::protobuf::RepeatedField< float >*
ImageSearch::mutable_features() {
  return &features_;
}

// -------------------------------------------------------------------

// SearchResult

// required int64 st_ids = 1;
inline bool SearchResult::has_st_ids() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchResult::set_has_st_ids() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchResult::clear_has_st_ids() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchResult::clear_st_ids() {
  st_ids_ = GOOGLE_LONGLONG(0);
  clear_has_st_ids();
}
inline ::google::protobuf::int64 SearchResult::st_ids() const {
  return st_ids_;
}
inline void SearchResult::set_st_ids(::google::protobuf::int64 value) {
  set_has_st_ids();
  st_ids_ = value;
}

// -------------------------------------------------------------------

// Heart

// required int32 heart = 1;
inline bool Heart::has_heart() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Heart::set_has_heart() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Heart::clear_has_heart() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Heart::clear_heart() {
  heart_ = 0;
  clear_has_heart();
}
inline ::google::protobuf::int32 Heart::heart() const {
  return heart_;
}
inline void Heart::set_heart(::google::protobuf::int32 value) {
  set_has_heart();
  heart_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mstudy

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_machine_5fstudy_2eproto__INCLUDED
