// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machine_study.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "machine_study.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mstudy {

namespace {

const ::google::protobuf::Descriptor* ImageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageProcessResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageProcessResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageSearch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageSearch_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Heart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Heart_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_machine_5fstudy_2eproto() {
  protobuf_AddDesc_machine_5fstudy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "machine_study.proto");
  GOOGLE_CHECK(file != NULL);
  ImageData_descriptor_ = file->message_type(0);
  static const int ImageData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, st_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, resize_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, resize_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, image_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, is_return_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, is_return_feature_zip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, is_server_save_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, is_create_model_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, is_get_colors_),
  };
  ImageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageData_descriptor_,
      ImageData::default_instance_,
      ImageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageData));
  ImageProcessResult_descriptor_ = file->message_type(1);
  static const int ImageProcessResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessResult, st_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessResult, extracted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessResult, tonality1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessResult, tonality2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessResult, tonality3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessResult, feature_data_),
  };
  ImageProcessResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageProcessResult_descriptor_,
      ImageProcessResult::default_instance_,
      ImageProcessResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageProcessResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageProcessResult));
  FeatureData_descriptor_ = file->message_type(2);
  static const int FeatureData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureData, st_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureData, picture_bin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureData, dbcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureData, tonality1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureData, tonality2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureData, tonality3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureData, feature_data_),
  };
  FeatureData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeatureData_descriptor_,
      FeatureData::default_instance_,
      FeatureData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeatureData));
  ImageSearch_descriptor_ = file->message_type(3);
  static const int ImageSearch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSearch, features_),
  };
  ImageSearch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageSearch_descriptor_,
      ImageSearch::default_instance_,
      ImageSearch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSearch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSearch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageSearch));
  SearchResult_descriptor_ = file->message_type(4);
  static const int SearchResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, st_ids_),
  };
  SearchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchResult_descriptor_,
      SearchResult::default_instance_,
      SearchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchResult));
  Heart_descriptor_ = file->message_type(5);
  static const int Heart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heart, heart_),
  };
  Heart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Heart_descriptor_,
      Heart::default_instance_,
      Heart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Heart));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_machine_5fstudy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageData_descriptor_, &ImageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageProcessResult_descriptor_, &ImageProcessResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeatureData_descriptor_, &FeatureData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageSearch_descriptor_, &ImageSearch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchResult_descriptor_, &SearchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Heart_descriptor_, &Heart::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_machine_5fstudy_2eproto() {
  delete ImageData::default_instance_;
  delete ImageData_reflection_;
  delete ImageProcessResult::default_instance_;
  delete ImageProcessResult_reflection_;
  delete FeatureData::default_instance_;
  delete FeatureData_reflection_;
  delete ImageSearch::default_instance_;
  delete ImageSearch_reflection_;
  delete SearchResult::default_instance_;
  delete SearchResult_reflection_;
  delete Heart::default_instance_;
  delete Heart_reflection_;
}

void protobuf_AddDesc_machine_5fstudy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023machine_study.proto\022\006mstudy\"\373\001\n\tImageD"
    "ata\022\r\n\005st_id\030\001 \002(\003\022\r\n\005bytes\030\002 \001(\014\022\024\n\014res"
    "ize_width\030\003 \001(\005\022\025\n\rresize_height\030\004 \001(\005\022\024"
    "\n\014image_format\030\005 \001(\t\022\031\n\021is_return_featur"
    "e\030\006 \001(\010\022\035\n\025is_return_feature_zip\030\007 \001(\010\022\036"
    "\n\026is_server_save_feature\030\010 \001(\010\022\034\n\024is_cre"
    "ate_model_data\030\t \001(\010\022\025\n\ris_get_colors\030\n "
    "\001(\010\"\205\001\n\022ImageProcessResult\022\r\n\005st_id\030\002 \002("
    "\003\022\021\n\textracted\030\003 \002(\005\022\021\n\ttonality1\030\004 \001(\005\022"
    "\021\n\ttonality2\030\005 \001(\005\022\021\n\ttonality3\030\006 \001(\005\022\024\n"
    "\014feature_data\030\007 \003(\002\"\237\001\n\013FeatureData\022\n\n\002i"
    "d\030\001 \002(\003\022\r\n\005st_id\030\002 \002(\003\022\026\n\016picture_bin_id"
    "\030\003 \002(\003\022\016\n\006dbcode\030\004 \003(\002\022\021\n\ttonality1\030\005 \001("
    "\005\022\021\n\ttonality2\030\006 \001(\005\022\021\n\ttonality3\030\007 \001(\005\022"
    "\024\n\014feature_data\030\010 \003(\002\"\037\n\013ImageSearch\022\020\n\010"
    "features\030\001 \003(\002\"\036\n\014SearchResult\022\016\n\006st_ids"
    "\030\001 \002(\003\"\026\n\005Heart\022\r\n\005heart\030\001 \002(\005B\"\n\024com.im"
    "core.ons.modelB\nMQProtoBuf", 706);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "machine_study.proto", &protobuf_RegisterTypes);
  ImageData::default_instance_ = new ImageData();
  ImageProcessResult::default_instance_ = new ImageProcessResult();
  FeatureData::default_instance_ = new FeatureData();
  ImageSearch::default_instance_ = new ImageSearch();
  SearchResult::default_instance_ = new SearchResult();
  Heart::default_instance_ = new Heart();
  ImageData::default_instance_->InitAsDefaultInstance();
  ImageProcessResult::default_instance_->InitAsDefaultInstance();
  FeatureData::default_instance_->InitAsDefaultInstance();
  ImageSearch::default_instance_->InitAsDefaultInstance();
  SearchResult::default_instance_->InitAsDefaultInstance();
  Heart::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_machine_5fstudy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_machine_5fstudy_2eproto {
  StaticDescriptorInitializer_machine_5fstudy_2eproto() {
    protobuf_AddDesc_machine_5fstudy_2eproto();
  }
} static_descriptor_initializer_machine_5fstudy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ImageData::kStIdFieldNumber;
const int ImageData::kBytesFieldNumber;
const int ImageData::kResizeWidthFieldNumber;
const int ImageData::kResizeHeightFieldNumber;
const int ImageData::kImageFormatFieldNumber;
const int ImageData::kIsReturnFeatureFieldNumber;
const int ImageData::kIsReturnFeatureZipFieldNumber;
const int ImageData::kIsServerSaveFeatureFieldNumber;
const int ImageData::kIsCreateModelDataFieldNumber;
const int ImageData::kIsGetColorsFieldNumber;
#endif  // !_MSC_VER

ImageData::ImageData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageData::InitAsDefaultInstance() {
}

ImageData::ImageData(const ImageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageData::SharedCtor() {
  _cached_size_ = 0;
  st_id_ = GOOGLE_LONGLONG(0);
  bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resize_width_ = 0;
  resize_height_ = 0;
  image_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_return_feature_ = false;
  is_return_feature_zip_ = false;
  is_server_save_feature_ = false;
  is_create_model_data_ = false;
  is_get_colors_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageData::~ImageData() {
  SharedDtor();
}

void ImageData::SharedDtor() {
  if (bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_;
  }
  if (image_format_ != &::google::protobuf::internal::kEmptyString) {
    delete image_format_;
  }
  if (this != default_instance_) {
  }
}

void ImageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageData_descriptor_;
}

const ImageData& ImageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machine_5fstudy_2eproto();
  return *default_instance_;
}

ImageData* ImageData::default_instance_ = NULL;

ImageData* ImageData::New() const {
  return new ImageData;
}

void ImageData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    st_id_ = GOOGLE_LONGLONG(0);
    if (has_bytes()) {
      if (bytes_ != &::google::protobuf::internal::kEmptyString) {
        bytes_->clear();
      }
    }
    resize_width_ = 0;
    resize_height_ = 0;
    if (has_image_format()) {
      if (image_format_ != &::google::protobuf::internal::kEmptyString) {
        image_format_->clear();
      }
    }
    is_return_feature_ = false;
    is_return_feature_zip_ = false;
    is_server_save_feature_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_create_model_data_ = false;
    is_get_colors_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 st_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_id_)));
          set_has_st_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bytes;
        break;
      }

      // optional bytes bytes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_resize_width;
        break;
      }

      // optional int32 resize_width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resize_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resize_width_)));
          set_has_resize_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resize_height;
        break;
      }

      // optional int32 resize_height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resize_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resize_height_)));
          set_has_resize_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_image_format;
        break;
      }

      // optional string image_format = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image_format().data(), this->image_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_return_feature;
        break;
      }

      // optional bool is_return_feature = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_return_feature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_return_feature_)));
          set_has_is_return_feature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_return_feature_zip;
        break;
      }

      // optional bool is_return_feature_zip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_return_feature_zip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_return_feature_zip_)));
          set_has_is_return_feature_zip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_server_save_feature;
        break;
      }

      // optional bool is_server_save_feature = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_server_save_feature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_server_save_feature_)));
          set_has_is_server_save_feature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_create_model_data;
        break;
      }

      // optional bool is_create_model_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_create_model_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_create_model_data_)));
          set_has_is_create_model_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_get_colors;
        break;
      }

      // optional bool is_get_colors = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_get_colors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_get_colors_)));
          set_has_is_get_colors();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 st_id = 1;
  if (has_st_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->st_id(), output);
  }

  // optional bytes bytes = 2;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->bytes(), output);
  }

  // optional int32 resize_width = 3;
  if (has_resize_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resize_width(), output);
  }

  // optional int32 resize_height = 4;
  if (has_resize_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->resize_height(), output);
  }

  // optional string image_format = 5;
  if (has_image_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_format().data(), this->image_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->image_format(), output);
  }

  // optional bool is_return_feature = 6;
  if (has_is_return_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_return_feature(), output);
  }

  // optional bool is_return_feature_zip = 7;
  if (has_is_return_feature_zip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_return_feature_zip(), output);
  }

  // optional bool is_server_save_feature = 8;
  if (has_is_server_save_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_server_save_feature(), output);
  }

  // optional bool is_create_model_data = 9;
  if (has_is_create_model_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_create_model_data(), output);
  }

  // optional bool is_get_colors = 10;
  if (has_is_get_colors()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_get_colors(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 st_id = 1;
  if (has_st_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->st_id(), target);
  }

  // optional bytes bytes = 2;
  if (has_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bytes(), target);
  }

  // optional int32 resize_width = 3;
  if (has_resize_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resize_width(), target);
  }

  // optional int32 resize_height = 4;
  if (has_resize_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->resize_height(), target);
  }

  // optional string image_format = 5;
  if (has_image_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_format().data(), this->image_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->image_format(), target);
  }

  // optional bool is_return_feature = 6;
  if (has_is_return_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_return_feature(), target);
  }

  // optional bool is_return_feature_zip = 7;
  if (has_is_return_feature_zip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_return_feature_zip(), target);
  }

  // optional bool is_server_save_feature = 8;
  if (has_is_server_save_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_server_save_feature(), target);
  }

  // optional bool is_create_model_data = 9;
  if (has_is_create_model_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_create_model_data(), target);
  }

  // optional bool is_get_colors = 10;
  if (has_is_get_colors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_get_colors(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 st_id = 1;
    if (has_st_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->st_id());
    }

    // optional bytes bytes = 2;
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes());
    }

    // optional int32 resize_width = 3;
    if (has_resize_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resize_width());
    }

    // optional int32 resize_height = 4;
    if (has_resize_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resize_height());
    }

    // optional string image_format = 5;
    if (has_image_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_format());
    }

    // optional bool is_return_feature = 6;
    if (has_is_return_feature()) {
      total_size += 1 + 1;
    }

    // optional bool is_return_feature_zip = 7;
    if (has_is_return_feature_zip()) {
      total_size += 1 + 1;
    }

    // optional bool is_server_save_feature = 8;
    if (has_is_server_save_feature()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_create_model_data = 9;
    if (has_is_create_model_data()) {
      total_size += 1 + 1;
    }

    // optional bool is_get_colors = 10;
    if (has_is_get_colors()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageData::MergeFrom(const ImageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_st_id()) {
      set_st_id(from.st_id());
    }
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
    if (from.has_resize_width()) {
      set_resize_width(from.resize_width());
    }
    if (from.has_resize_height()) {
      set_resize_height(from.resize_height());
    }
    if (from.has_image_format()) {
      set_image_format(from.image_format());
    }
    if (from.has_is_return_feature()) {
      set_is_return_feature(from.is_return_feature());
    }
    if (from.has_is_return_feature_zip()) {
      set_is_return_feature_zip(from.is_return_feature_zip());
    }
    if (from.has_is_server_save_feature()) {
      set_is_server_save_feature(from.is_server_save_feature());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_create_model_data()) {
      set_is_create_model_data(from.is_create_model_data());
    }
    if (from.has_is_get_colors()) {
      set_is_get_colors(from.is_get_colors());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageData::CopyFrom(const ImageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ImageData::Swap(ImageData* other) {
  if (other != this) {
    std::swap(st_id_, other->st_id_);
    std::swap(bytes_, other->bytes_);
    std::swap(resize_width_, other->resize_width_);
    std::swap(resize_height_, other->resize_height_);
    std::swap(image_format_, other->image_format_);
    std::swap(is_return_feature_, other->is_return_feature_);
    std::swap(is_return_feature_zip_, other->is_return_feature_zip_);
    std::swap(is_server_save_feature_, other->is_server_save_feature_);
    std::swap(is_create_model_data_, other->is_create_model_data_);
    std::swap(is_get_colors_, other->is_get_colors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageData_descriptor_;
  metadata.reflection = ImageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageProcessResult::kStIdFieldNumber;
const int ImageProcessResult::kExtractedFieldNumber;
const int ImageProcessResult::kTonality1FieldNumber;
const int ImageProcessResult::kTonality2FieldNumber;
const int ImageProcessResult::kTonality3FieldNumber;
const int ImageProcessResult::kFeatureDataFieldNumber;
#endif  // !_MSC_VER

ImageProcessResult::ImageProcessResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageProcessResult::InitAsDefaultInstance() {
}

ImageProcessResult::ImageProcessResult(const ImageProcessResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageProcessResult::SharedCtor() {
  _cached_size_ = 0;
  st_id_ = GOOGLE_LONGLONG(0);
  extracted_ = 0;
  tonality1_ = 0;
  tonality2_ = 0;
  tonality3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageProcessResult::~ImageProcessResult() {
  SharedDtor();
}

void ImageProcessResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageProcessResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageProcessResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageProcessResult_descriptor_;
}

const ImageProcessResult& ImageProcessResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machine_5fstudy_2eproto();
  return *default_instance_;
}

ImageProcessResult* ImageProcessResult::default_instance_ = NULL;

ImageProcessResult* ImageProcessResult::New() const {
  return new ImageProcessResult;
}

void ImageProcessResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    st_id_ = GOOGLE_LONGLONG(0);
    extracted_ = 0;
    tonality1_ = 0;
    tonality2_ = 0;
    tonality3_ = 0;
  }
  feature_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageProcessResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 st_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_id_)));
          set_has_st_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_extracted;
        break;
      }

      // required int32 extracted = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extracted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extracted_)));
          set_has_extracted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tonality1;
        break;
      }

      // optional int32 tonality1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tonality1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tonality1_)));
          set_has_tonality1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tonality2;
        break;
      }

      // optional int32 tonality2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tonality2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tonality2_)));
          set_has_tonality2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tonality3;
        break;
      }

      // optional int32 tonality3 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tonality3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tonality3_)));
          set_has_tonality3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_feature_data;
        break;
      }

      // repeated float feature_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_feature_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_feature_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_feature_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_feature_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageProcessResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 st_id = 2;
  if (has_st_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->st_id(), output);
  }

  // required int32 extracted = 3;
  if (has_extracted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->extracted(), output);
  }

  // optional int32 tonality1 = 4;
  if (has_tonality1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tonality1(), output);
  }

  // optional int32 tonality2 = 5;
  if (has_tonality2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tonality2(), output);
  }

  // optional int32 tonality3 = 6;
  if (has_tonality3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tonality3(), output);
  }

  // repeated float feature_data = 7;
  for (int i = 0; i < this->feature_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->feature_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageProcessResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 st_id = 2;
  if (has_st_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->st_id(), target);
  }

  // required int32 extracted = 3;
  if (has_extracted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->extracted(), target);
  }

  // optional int32 tonality1 = 4;
  if (has_tonality1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tonality1(), target);
  }

  // optional int32 tonality2 = 5;
  if (has_tonality2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tonality2(), target);
  }

  // optional int32 tonality3 = 6;
  if (has_tonality3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tonality3(), target);
  }

  // repeated float feature_data = 7;
  for (int i = 0; i < this->feature_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->feature_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageProcessResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 st_id = 2;
    if (has_st_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->st_id());
    }

    // required int32 extracted = 3;
    if (has_extracted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extracted());
    }

    // optional int32 tonality1 = 4;
    if (has_tonality1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tonality1());
    }

    // optional int32 tonality2 = 5;
    if (has_tonality2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tonality2());
    }

    // optional int32 tonality3 = 6;
    if (has_tonality3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tonality3());
    }

  }
  // repeated float feature_data = 7;
  {
    int data_size = 0;
    data_size = 4 * this->feature_data_size();
    total_size += 1 * this->feature_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageProcessResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageProcessResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageProcessResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageProcessResult::MergeFrom(const ImageProcessResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  feature_data_.MergeFrom(from.feature_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_st_id()) {
      set_st_id(from.st_id());
    }
    if (from.has_extracted()) {
      set_extracted(from.extracted());
    }
    if (from.has_tonality1()) {
      set_tonality1(from.tonality1());
    }
    if (from.has_tonality2()) {
      set_tonality2(from.tonality2());
    }
    if (from.has_tonality3()) {
      set_tonality3(from.tonality3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageProcessResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageProcessResult::CopyFrom(const ImageProcessResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageProcessResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ImageProcessResult::Swap(ImageProcessResult* other) {
  if (other != this) {
    std::swap(st_id_, other->st_id_);
    std::swap(extracted_, other->extracted_);
    std::swap(tonality1_, other->tonality1_);
    std::swap(tonality2_, other->tonality2_);
    std::swap(tonality3_, other->tonality3_);
    feature_data_.Swap(&other->feature_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageProcessResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageProcessResult_descriptor_;
  metadata.reflection = ImageProcessResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeatureData::kIdFieldNumber;
const int FeatureData::kStIdFieldNumber;
const int FeatureData::kPictureBinIdFieldNumber;
const int FeatureData::kDbcodeFieldNumber;
const int FeatureData::kTonality1FieldNumber;
const int FeatureData::kTonality2FieldNumber;
const int FeatureData::kTonality3FieldNumber;
const int FeatureData::kFeatureDataFieldNumber;
#endif  // !_MSC_VER

FeatureData::FeatureData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeatureData::InitAsDefaultInstance() {
}

FeatureData::FeatureData(const FeatureData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeatureData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  st_id_ = GOOGLE_LONGLONG(0);
  picture_bin_id_ = GOOGLE_LONGLONG(0);
  tonality1_ = 0;
  tonality2_ = 0;
  tonality3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureData::~FeatureData() {
  SharedDtor();
}

void FeatureData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeatureData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureData_descriptor_;
}

const FeatureData& FeatureData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machine_5fstudy_2eproto();
  return *default_instance_;
}

FeatureData* FeatureData::default_instance_ = NULL;

FeatureData* FeatureData::New() const {
  return new FeatureData;
}

void FeatureData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    st_id_ = GOOGLE_LONGLONG(0);
    picture_bin_id_ = GOOGLE_LONGLONG(0);
    tonality1_ = 0;
    tonality2_ = 0;
    tonality3_ = 0;
  }
  dbcode_.Clear();
  feature_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeatureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_st_id;
        break;
      }

      // required int64 st_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_st_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_id_)));
          set_has_st_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_picture_bin_id;
        break;
      }

      // required int64 picture_bin_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_picture_bin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &picture_bin_id_)));
          set_has_picture_bin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dbcode;
        break;
      }

      // repeated float dbcode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dbcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_dbcode())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_dbcode())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dbcode;
        if (input->ExpectTag(40)) goto parse_tonality1;
        break;
      }

      // optional int32 tonality1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tonality1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tonality1_)));
          set_has_tonality1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tonality2;
        break;
      }

      // optional int32 tonality2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tonality2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tonality2_)));
          set_has_tonality2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tonality3;
        break;
      }

      // optional int32 tonality3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tonality3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tonality3_)));
          set_has_tonality3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_feature_data;
        break;
      }

      // repeated float feature_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_feature_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69, input, this->mutable_feature_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_feature_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_feature_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeatureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int64 st_id = 2;
  if (has_st_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->st_id(), output);
  }

  // required int64 picture_bin_id = 3;
  if (has_picture_bin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->picture_bin_id(), output);
  }

  // repeated float dbcode = 4;
  for (int i = 0; i < this->dbcode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->dbcode(i), output);
  }

  // optional int32 tonality1 = 5;
  if (has_tonality1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tonality1(), output);
  }

  // optional int32 tonality2 = 6;
  if (has_tonality2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tonality2(), output);
  }

  // optional int32 tonality3 = 7;
  if (has_tonality3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tonality3(), output);
  }

  // repeated float feature_data = 8;
  for (int i = 0; i < this->feature_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->feature_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeatureData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int64 st_id = 2;
  if (has_st_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->st_id(), target);
  }

  // required int64 picture_bin_id = 3;
  if (has_picture_bin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->picture_bin_id(), target);
  }

  // repeated float dbcode = 4;
  for (int i = 0; i < this->dbcode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->dbcode(i), target);
  }

  // optional int32 tonality1 = 5;
  if (has_tonality1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tonality1(), target);
  }

  // optional int32 tonality2 = 6;
  if (has_tonality2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tonality2(), target);
  }

  // optional int32 tonality3 = 7;
  if (has_tonality3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tonality3(), target);
  }

  // repeated float feature_data = 8;
  for (int i = 0; i < this->feature_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(8, this->feature_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeatureData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int64 st_id = 2;
    if (has_st_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->st_id());
    }

    // required int64 picture_bin_id = 3;
    if (has_picture_bin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->picture_bin_id());
    }

    // optional int32 tonality1 = 5;
    if (has_tonality1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tonality1());
    }

    // optional int32 tonality2 = 6;
    if (has_tonality2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tonality2());
    }

    // optional int32 tonality3 = 7;
    if (has_tonality3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tonality3());
    }

  }
  // repeated float dbcode = 4;
  {
    int data_size = 0;
    data_size = 4 * this->dbcode_size();
    total_size += 1 * this->dbcode_size() + data_size;
  }

  // repeated float feature_data = 8;
  {
    int data_size = 0;
    data_size = 4 * this->feature_data_size();
    total_size += 1 * this->feature_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeatureData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeatureData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureData::MergeFrom(const FeatureData& from) {
  GOOGLE_CHECK_NE(&from, this);
  dbcode_.MergeFrom(from.dbcode_);
  feature_data_.MergeFrom(from.feature_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_st_id()) {
      set_st_id(from.st_id());
    }
    if (from.has_picture_bin_id()) {
      set_picture_bin_id(from.picture_bin_id());
    }
    if (from.has_tonality1()) {
      set_tonality1(from.tonality1());
    }
    if (from.has_tonality2()) {
      set_tonality2(from.tonality2());
    }
    if (from.has_tonality3()) {
      set_tonality3(from.tonality3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeatureData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureData::CopyFrom(const FeatureData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FeatureData::Swap(FeatureData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(st_id_, other->st_id_);
    std::swap(picture_bin_id_, other->picture_bin_id_);
    dbcode_.Swap(&other->dbcode_);
    std::swap(tonality1_, other->tonality1_);
    std::swap(tonality2_, other->tonality2_);
    std::swap(tonality3_, other->tonality3_);
    feature_data_.Swap(&other->feature_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeatureData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureData_descriptor_;
  metadata.reflection = FeatureData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageSearch::kFeaturesFieldNumber;
#endif  // !_MSC_VER

ImageSearch::ImageSearch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageSearch::InitAsDefaultInstance() {
}

ImageSearch::ImageSearch(const ImageSearch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageSearch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageSearch::~ImageSearch() {
  SharedDtor();
}

void ImageSearch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageSearch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageSearch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageSearch_descriptor_;
}

const ImageSearch& ImageSearch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machine_5fstudy_2eproto();
  return *default_instance_;
}

ImageSearch* ImageSearch::default_instance_ = NULL;

ImageSearch* ImageSearch::New() const {
  return new ImageSearch;
}

void ImageSearch::Clear() {
  features_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageSearch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float features = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_features:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_features())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_features())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_features;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageSearch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float features = 1;
  for (int i = 0; i < this->features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->features(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageSearch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float features = 1;
  for (int i = 0; i < this->features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->features(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageSearch::ByteSize() const {
  int total_size = 0;

  // repeated float features = 1;
  {
    int data_size = 0;
    data_size = 4 * this->features_size();
    total_size += 1 * this->features_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageSearch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageSearch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageSearch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageSearch::MergeFrom(const ImageSearch& from) {
  GOOGLE_CHECK_NE(&from, this);
  features_.MergeFrom(from.features_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageSearch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageSearch::CopyFrom(const ImageSearch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSearch::IsInitialized() const {

  return true;
}

void ImageSearch::Swap(ImageSearch* other) {
  if (other != this) {
    features_.Swap(&other->features_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageSearch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageSearch_descriptor_;
  metadata.reflection = ImageSearch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchResult::kStIdsFieldNumber;
#endif  // !_MSC_VER

SearchResult::SearchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchResult::InitAsDefaultInstance() {
}

SearchResult::SearchResult(const SearchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchResult::SharedCtor() {
  _cached_size_ = 0;
  st_ids_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchResult::~SearchResult() {
  SharedDtor();
}

void SearchResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchResult_descriptor_;
}

const SearchResult& SearchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machine_5fstudy_2eproto();
  return *default_instance_;
}

SearchResult* SearchResult::default_instance_ = NULL;

SearchResult* SearchResult::New() const {
  return new SearchResult;
}

void SearchResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    st_ids_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 st_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_ids_)));
          set_has_st_ids();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 st_ids = 1;
  if (has_st_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->st_ids(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 st_ids = 1;
  if (has_st_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->st_ids(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 st_ids = 1;
    if (has_st_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->st_ids());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchResult::MergeFrom(const SearchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_st_ids()) {
      set_st_ids(from.st_ids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResult::CopyFrom(const SearchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SearchResult::Swap(SearchResult* other) {
  if (other != this) {
    std::swap(st_ids_, other->st_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchResult_descriptor_;
  metadata.reflection = SearchResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Heart::kHeartFieldNumber;
#endif  // !_MSC_VER

Heart::Heart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Heart::InitAsDefaultInstance() {
}

Heart::Heart(const Heart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Heart::SharedCtor() {
  _cached_size_ = 0;
  heart_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Heart::~Heart() {
  SharedDtor();
}

void Heart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Heart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Heart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Heart_descriptor_;
}

const Heart& Heart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machine_5fstudy_2eproto();
  return *default_instance_;
}

Heart* Heart::default_instance_ = NULL;

Heart* Heart::New() const {
  return new Heart;
}

void Heart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heart_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Heart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 heart = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heart_)));
          set_has_heart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Heart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 heart = 1;
  if (has_heart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->heart(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Heart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 heart = 1;
  if (has_heart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->heart(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Heart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 heart = 1;
    if (has_heart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heart());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Heart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Heart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Heart::MergeFrom(const Heart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heart()) {
      set_heart(from.heart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Heart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heart::CopyFrom(const Heart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Heart::Swap(Heart* other) {
  if (other != this) {
    std::swap(heart_, other->heart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Heart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Heart_descriptor_;
  metadata.reflection = Heart_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mstudy

// @@protoc_insertion_point(global_scope)
